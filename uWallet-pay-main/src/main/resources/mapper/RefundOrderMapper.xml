<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.uwallet.pay.main.dao.RefundOrderDAO">

  <resultMap id="refundOrderMap" type="com.uwallet.pay.main.model.entity.RefundOrder">
    <id property="id" jdbcType="BIGINT" column="id"/>
    <result property="orgPayUserId" jdbcType="BIGINT" column="org_pay_user_id"/>
    <result property="merchantId" jdbcType="BIGINT" column="merchant_id"/>
    <result property="superMerchantId" jdbcType="BIGINT" column="super_merchant_id"/>
    <result property="refundAmount" jdbcType="DECIMAL" column="refund_amount"/>
    <result property="transNo" jdbcType="VARCHAR" column="trans_no"/>
    <result property="transType" jdbcType="TINYINT" column="trans_type"/>
    <result property="state" jdbcType="TINYINT" column="state"/>
    <result property="orderSource" jdbcType="TINYINT" column="order_source"/>
    <result property="currency" jdbcType="VARCHAR" column="currency"/>
    <result property="idempotencyKey" jdbcType="VARCHAR" column="Idempotency_key"/>
    <result property="reference" jdbcType="VARCHAR" column="reference"/>
    <result property="returnCode" jdbcType="VARCHAR" column="return_code"/>
    <result property="returnMessage" jdbcType="VARCHAR" column="return_message"/>
    <result property="settlementState" jdbcType="TINYINT" column="settlement_state"/>
    <result property="settlementTime" jdbcType="BIGINT" column="settlement_time"/>
    <result property="makeUpFee" jdbcType="DECIMAL" column="make_up_fee"/>
    <result property="makeUpState" jdbcType="TINYINT" column="make_up_state"/>
    <result property="reason" jdbcType="VARCHAR" column="reason"/>
    <result property="remark" jdbcType="VARCHAR" column="remark"/>
    <result property="createdBy" jdbcType="BIGINT" column="created_by"/>
    <result property="createdDate" jdbcType="BIGINT" column="created_date"/>
    <result property="modifiedBy" jdbcType="BIGINT" column="modified_by"/>
    <result property="modifiedDate" jdbcType="BIGINT" column="modified_date"/>
    <result property="status" jdbcType="TINYINT" column="status"/>
    <result property="ip" jdbcType="VARCHAR" column="ip"/>
    <result property="batchId" jdbcType="BIGINT" column="batch_id"/>
    <result property="notSettlementAmount" jdbcType="DECIMAL" column="not_settlement_amount"/>
    <result property="checkState" jdbcType="TINYINT" column="check_state"/>
    <result property="checkTime" jdbcType="BIGINT" column="check_time"/>
  </resultMap>

  <resultMap id="refundOrderDTOMap" type="com.uwallet.pay.main.model.dto.RefundOrderDTO" extends="refundOrderMap"></resultMap>

  <!--通用查询条件-->
  <sql id="basicParams">
        <if test="id != null">
          AND `id`=#{id}
        </if>
        <if test="orgPayUserId != null">
          AND `org_pay_user_id`=#{orgPayUserId}
        </if>
        <if test="merchantId != null">
          AND `merchant_id`=#{merchantId}
        </if>
        <if test="superMerchantId != null">
          AND `super_merchant_id`=#{superMerchantId}
        </if>
        <if test="refundAmount != null">
          AND `refund_amount`=#{refundAmount}
        </if>
        <if test="transNo != null">
          AND `trans_no`=#{transNo}
        </if>
        <if test="transType != null">
          AND `trans_type`=#{transType}
        </if>
        <if test="state != null">
          AND `state`=#{state}
        </if>
        <if test="orderSource != null">
          AND `order_source`=#{orderSource}
        </if>
        <if test="currency != null">
          AND `currency`=#{currency}
        </if>
        <if test="idempotencyKey != null">
          AND `Idempotency_key`=#{idempotencyKey}
        </if>
        <if test="reference != null">
          AND `reference`=#{reference}
        </if>
        <if test="returnCode != null">
          AND `return_code`=#{returnCode}
        </if>
        <if test="returnMessage != null">
          AND `return_message`=#{returnMessage}
        </if>
        <if test="settlementState != null">
          AND `settlement_state`=#{settlementState}
        </if>
        <if test="settlementTime != null">
          AND `settlement_time`=#{settlementTime}
        </if>
        <if test="makeUpFee != null">
          AND `make_up_fee`=#{makeUpFee}
        </if>
        <if test="makeUpState != null">
          AND `make_up_state`=#{makeUpState}
        </if>
        <if test="reason != null">
          AND `reason`=#{reason}
        </if>
        <if test="remark != null">
          AND `remark`=#{remark}
        </if>
        <if test="createdBy != null">
          AND `created_by`=#{createdBy}
        </if>
        <if test="start != null and end != null">
          AND `created_date` BETWEEN #{start} AND #{ end}
        </if>
        <if test="modifiedBy != null">
          AND `modified_by`=#{modifiedBy}
        </if>
        <if test="modifiedDate != null">
          AND `modified_date`=#{modifiedDate}
        </if>
        <choose>
          <when test="status != null">AND status = #{status}</when>
          <otherwise><![CDATA[AND status > 0]]></otherwise>
        </choose>
        <if test="ip != null">
          AND `ip`=#{ip}
        </if>
        <if test="batchId != null">
          AND `batch_id`=#{batchId}
        </if>
        <if test="notSettlementAmount != null">
          AND `not_settlement_amount`=#{notSettlementAmount}
        </if>
        <if test="checkState != null">
          AND `check_state`=#{checkState}
        </if>
        <if test="checkTime != null">
          AND `check_time`=#{checkTime}
        </if>
  </sql>

  <insert id="insert" parameterType="com.uwallet.pay.main.model.entity.RefundOrder">
    INSERT INTO u_refund_order (
        <if test="id != null">
            `id` 
        </if>
        <if test="orgPayUserId != null">
            ,`org_pay_user_id` 
        </if>
        <if test="merchantId != null">
            ,`merchant_id` 
        </if>
        <if test="superMerchantId != null">
            ,`super_merchant_id` 
        </if>
        <if test="refundAmount != null">
            ,`refund_amount` 
        </if>
        <if test="transNo != null">
            ,`trans_no` 
        </if>
        <if test="transType != null">
            ,`trans_type` 
        </if>
        <if test="state != null">
            ,`state` 
        </if>
        <if test="orderSource != null">
            ,`order_source` 
        </if>
        <if test="currency != null">
            ,`currency` 
        </if>
        <if test="idempotencyKey != null">
            ,`Idempotency_key` 
        </if>
        <if test="reference != null">
            ,`reference` 
        </if>
        <if test="returnCode != null">
            ,`return_code` 
        </if>
        <if test="returnMessage != null">
            ,`return_message` 
        </if>
        <if test="settlementState != null">
            ,`settlement_state` 
        </if>
        <if test="settlementTime != null">
            ,`settlement_time` 
        </if>
        <if test="makeUpFee != null">
            ,`make_up_fee` 
        </if>
        <if test="makeUpState != null">
            ,`make_up_state` 
        </if>
        <if test="reason != null">
            ,`reason` 
        </if>
        <if test="remark != null">
            ,`remark` 
        </if>
        <if test="createdBy != null">
            ,`created_by` 
        </if>
        <if test="createdDate != null">
            ,`created_date` 
        </if>
        <if test="modifiedBy != null">
            ,`modified_by` 
        </if>
        <if test="modifiedDate != null">
            ,`modified_date` 
        </if>
        <if test="status != null">
            ,`status` 
        </if>
        <if test="ip != null">
            ,`ip` 
        </if>
        <if test="batchId != null">
            ,`batch_id` 
        </if>
        <if test="notSettlementAmount != null">
            ,`not_settlement_amount` 
        </if>
        <if test="checkState != null">
            ,`check_state` 
        </if>
        <if test="checkTime != null">
            ,`check_time`
        </if>
    ) VALUES (
        <if test="id != null">
              #{id}
        </if>
        <if test="orgPayUserId != null">
              ,#{orgPayUserId}
        </if>
        <if test="merchantId != null">
              ,#{merchantId}
        </if>
        <if test="superMerchantId != null">
              ,#{superMerchantId}
        </if>
        <if test="refundAmount != null">
              ,#{refundAmount}
        </if>
        <if test="transNo != null">
              ,#{transNo}
        </if>
        <if test="transType != null">
              ,#{transType}
        </if>
        <if test="state != null">
              ,#{state}
        </if>
        <if test="orderSource != null">
              ,#{orderSource}
        </if>
        <if test="currency != null">
              ,#{currency}
        </if>
        <if test="idempotencyKey != null">
              ,#{idempotencyKey}
        </if>
        <if test="reference != null">
              ,#{reference}
        </if>
        <if test="returnCode != null">
              ,#{returnCode}
        </if>
        <if test="returnMessage != null">
              ,#{returnMessage}
        </if>
        <if test="settlementState != null">
              ,#{settlementState}
        </if>
        <if test="settlementTime != null">
              ,#{settlementTime}
        </if>
        <if test="makeUpFee != null">
              ,#{makeUpFee}
        </if>
        <if test="makeUpState != null">
              ,#{makeUpState}
        </if>
        <if test="reason != null">
              ,#{reason}
        </if>
        <if test="remark != null">
              ,#{remark}
        </if>
        <if test="createdBy != null">
              ,#{createdBy}
        </if>
        <if test="createdDate != null">
              ,#{createdDate}
        </if>
        <if test="modifiedBy != null">
              ,#{modifiedBy}
        </if>
        <if test="modifiedDate != null">
              ,#{modifiedDate}
        </if>
        <if test="status != null">
              ,#{status}
        </if>
        <if test="ip != null">
              ,#{ip}
        </if>
        <if test="batchId != null">
              ,#{batchId}
        </if>
        <if test="notSettlementAmount != null">
              ,#{notSettlementAmount}
        </if>
        <if test="checkState != null">
              ,#{checkState}
        </if>
        <if test="checkTime != null">
              ,#{checkTime}
        </if>
    )
  </insert>

  <insert id="insertList" parameterType="List">
    INSERT INTO u_refund_order (
        `id`,
        `org_pay_user_id`,
        `merchant_id`,
        `super_merchant_id`,
        `refund_amount`,
        `trans_no`,
        `trans_type`,
        `state`,
        `order_source`,
        `currency`,
        `Idempotency_key`,
        `reference`,
        `return_code`,
        `return_message`,
        `settlement_state`,
        `settlement_time`,
        `make_up_fee`,
        `make_up_state`,
        `reason`,
        `remark`,
        `created_by`,
        `created_date`,
        `modified_by`,
        `modified_date`,
        `status`,
        `ip`,
        `batch_id`,
        `not_settlement_amount`,
        `check_state`,
        `check_time`
    ) VALUES
    <foreach collection="list" item="data" separator=",">
      (
        #{data.id},
        #{data.orgPayUserId},
        #{data.merchantId},
        #{data.superMerchantId},
        #{data.refundAmount},
        #{data.transNo},
        #{data.transType},
        #{data.state},
        #{data.orderSource},
        #{data.currency},
        #{data.idempotencyKey},
        #{data.reference},
        #{data.returnCode},
        #{data.returnMessage},
        #{data.settlementState},
        #{data.settlementTime},
        #{data.makeUpFee},
        #{data.makeUpState},
        #{data.reason},
        #{data.remark},
        #{data.createdBy},
        #{data.createdDate},
        #{data.modifiedBy},
        #{data.modifiedDate},
        #{data.status},
        #{data.ip},
        #{data.batchId},
        #{data.notSettlementAmount},
        #{data.checkState},
        #{data.checkTime}
      )
    </foreach>
  </insert>


    <update id="update" parameterType="com.uwallet.pay.main.model.entity.RefundOrder">
    UPDATE u_refund_order
    <set>
        <if test="id != null">
          `id`=#{id},
        </if>
        <if test="orgPayUserId != null">
          `org_pay_user_id`=#{orgPayUserId},
        </if>
        <if test="merchantId != null">
          `merchant_id`=#{merchantId},
        </if>
        <if test="superMerchantId != null">
          `super_merchant_id`=#{superMerchantId},
        </if>
        <if test="refundAmount != null">
          `refund_amount`=#{refundAmount},
        </if>
        <if test="transNo != null">
          `trans_no`=#{transNo},
        </if>
        <if test="transType != null">
          `trans_type`=#{transType},
        </if>
        <if test="state != null">
          `state`=#{state},
        </if>
        <if test="orderSource != null">
          `order_source`=#{orderSource},
        </if>
        <if test="currency != null">
          `currency`=#{currency},
        </if>
        <if test="idempotencyKey != null">
          `Idempotency_key`=#{idempotencyKey},
        </if>
        <if test="reference != null">
          `reference`=#{reference},
        </if>
        <if test="returnCode != null">
          `return_code`=#{returnCode},
        </if>
        <if test="returnMessage != null">
          `return_message`=#{returnMessage},
        </if>
        <if test="settlementState != null">
          `settlement_state`=#{settlementState},
        </if>
        <if test="settlementTime != null">
          `settlement_time`=#{settlementTime},
        </if>
        <if test="makeUpFee != null">
          `make_up_fee`=#{makeUpFee},
        </if>
        <if test="makeUpState != null">
          `make_up_state`=#{makeUpState},
        </if>
        <if test="reason != null">
          `reason`=#{reason},
        </if>
        <if test="remark != null">
          `remark`=#{remark},
        </if>
        <if test="createdBy != null">
          `created_by`=#{createdBy},
        </if>
        <if test="createdDate != null">
          `created_date`=#{createdDate},
        </if>
        <if test="modifiedBy != null">
          `modified_by`=#{modifiedBy},
        </if>
        <if test="modifiedDate != null">
          `modified_date`=#{modifiedDate},
        </if>
        <if test="status != null">
          `status`=#{status},
        </if>
        <if test="ip != null">
          `ip`=#{ip},
        </if>
        <if test="batchId != null">
          `batch_id`=#{batchId},
        </if>
        <if test="notSettlementAmount != null">
          `not_settlement_amount`=#{notSettlementAmount},
        </if>
        <if test="checkState != null">
          `check_state`=#{checkState},
        </if>
        <if test="checkTime != null">
          `check_time`=#{checkTime},
        </if>
    </set>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <choose>
        <when test="status != null ">AND status = #{status.value}</when>
        <otherwise><![CDATA[AND status > 0]]></otherwise>
      </choose>
        AND id = #{id}
    </trim>
  </update>

  <update id="delete" parameterType="Map">
      UPDATE u_refund_order
      SET `status`=0,`modified_by`=#{modifiedBy},`modified_date`=#{modifiedDate}
      WHERE id = #{id}
  </update>

  <delete id="pdelete" parameterType="Map">
      DELETE FROM u_refund_order
      WHERE id = #{id}
  </delete>

  <select id="count" parameterType="Map" resultType="Integer">
    <![CDATA[
            SELECT COUNT(DISTINCT id) FROM u_refund_order
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
  </select>

  <select id="selectOne" parameterType="Map" resultMap="refundOrderMap">
    <![CDATA[
            SELECT * FROM u_refund_order
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    LIMIT 1
  </select>

  <select id="selectOneDTO" parameterType="Map" resultMap="refundOrderDTOMap">
    <![CDATA[
            SELECT * FROM u_refund_order
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    LIMIT 1
  </select>

  <select id="select" parameterType="Map" resultMap="refundOrderMap">
    <![CDATA[
            SELECT * FROM u_refund_order
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    <if test="scs != null and scs.size() > 0">
      ORDER BY
      <foreach collection="scs" item="sc" separator=",">
          ${sc.field} ${sc.order}
      </foreach>
    </if>
    <if test="pc != null">
      LIMIT ${pc.startIndex}, ${pc.pageSize}
    </if>
  </select>

  <select id="selectDTO" parameterType="Map" resultMap="refundOrderDTOMap">
    <![CDATA[
            SELECT * FROM u_refund_order
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    <if test="scs != null and scs.size() > 0">
      ORDER BY
      <foreach collection="scs" item="sc" separator=",">
          ${sc.field} ${sc.order}
      </foreach>
    </if>
    <if test="pc != null">
      LIMIT ${pc.startIndex}, ${pc.pageSize}
    </if>
  </select>

  <select id="selectMap" parameterType="Map" resultType="Map">
    SELECT
    <foreach collection="columns" item="cname" separator="," open="`" close="`">
        ${cname}
    </foreach>
    FROM u_refund_order
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    <if test="scs != null and scs.size() > 0">
      ORDER BY
      <foreach collection="scs" item="sc" separator=",">
          ${sc.field} ${sc.order}
      </foreach>
    </if>
    <if test="pc != null">
      LIMIT ${pc.startIndex}, ${pc.pageSize}
    </if>
  </select>

  <!--统计相关查询-->
  <select id="groupCount" parameterType="Map" resultType="Map">
    <![CDATA[
            SELECT ${group} AS `group`, COUNT(DISTINCT id) AS `count` FROM u_refund_order
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    GROUP BY `group`
    ORDER BY `group` ASC
  </select>

  <select id="sum" parameterType="Map" resultType="Double">
    <![CDATA[
            SELECT IFNULL(SUM(${sumfield}),0) AS `sum` FROM u_refund_order
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
  </select>

  <select id="groupSum" parameterType="Map" resultType="Map">
    <![CDATA[
            SELECT ${group} AS `group`, IFNULL(SUM(${sumfield}),0) AS `sum` FROM u_refund_order
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    GROUP BY `group`
    ORDER BY `group` ASC
  </select>


    <select id="findCreditRefundDoubt" parameterType="Map" resultMap="refundOrderDTOMap">
        select * from u_refund_order where state  in (0,3) and trans_type = 36  AND status = 1
         <![CDATA[AND created_date > unix_timestamp(DATE_SUB(NOW(), INTERVAL 8 DAY))*1000
                AND modified_date < unix_timestamp(DATE_SUB(NOW(), INTERVAL 5 MINUTE))*1000
        ]]>
    </select>
    <select id="getH5MerchantRefundUnclearedCount" resultType="java.lang.Integer">
        select count(*) from u_refund_order ro left join u_api_merchant am on ro.merchant_id = am.id
        where ro.`status` =  1 and ro.`status` = 1 and ro.state = 1 and ro.settlement_state = 0
        <if test="start != null">
            and ro.created_date  <![CDATA[ < ]]> #{start}
        </if>
        <if test="merchantIdList != null">
            AND ro.merchant_id IN
            <foreach collection="merchantIdList" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>

    </select>
    <select id="merchantClearMsgList" resultType="com.uwallet.pay.main.model.dto.RefundOrderDTO">

        SELECT
        *
        FROM
        u_refund_order r
        WHERE
        r.`status` = 1
        AND r.state  = 1

        <if test="merchantIdList != null">
            AND r.merchant_id IN
            <foreach collection="merchantIdList" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
    </select>
    <select id="getRefundsListCount" resultType="java.lang.Integer">

        select count(*) from u_refund_order r
            left join u_api_merchant sm on sm.id = r.super_merchant_id
            left join u_qr_pay_flow q on r.trans_no = q.trans_no
            left join u_user u on q.pay_user_id = u.id
        <if test="subMerchantId != null">
            left join u_api_merchant m on m.id = r.merchant_id
        </if>
        where r.`status` = 1
            and q.`status` = 1
        <if test="orderSource != null">
            and r.order_source =  #{orderSource}
        </if>
        <if test="transNo != null">
            and q.trans_no =  #{transNo}
        </if>
        <if test="id != null">
            and r.id =  #{id}
        </if>
        <if test="merchantId != null">
            and sm.id =  #{merchantId}
        </if>
        <if test="subMerchantId != null">
            and m.id =  #{subMerchantId}
        </if>
        <if test="practicalName != null">
            and sm.practical_name like CONCAT("%", #{practicalName} , "%")
        </if>
        <if test="userFirstName != null">
            and u.user_first_name like CONCAT("%", #{userFirstName},"%")
        </if>
        <if test="userLastName != null">
            and u.user_last_name like  CONCAT("%", #{userLastName},"%")
        </if>
        <if test="phone != null">
            and u.phone =  #{phone}
        </if>
         <if test="states != null">
            and r.state in (${states})
         </if>
        <if test="state != null">
            and r.state  = #{state}
        </if>
        <if test="start != null and end != null">
            AND r.created_date BETWEEN #{start} AND #{end}
        </if>
        <if test="settlementState != null">
            and r.settlement_state  = #{settlementState}
        </if>
    </select>
    <select id="getRefundsList" resultType="com.uwallet.pay.main.model.dto.RefundOrderListDTO">

        SELECT
        r.trans_no as transNo,
        r.id as id ,
        u.phone as phone,
        u.user_first_name as userFirstName,
        u.user_last_name as userLastName,
        sm.practical_name as superPracticalName,
        sm.id as superMerchantId,
        m.practical_name as practicalName,
        m.id as merchantId,
        q.trans_amount as transAmount,
        w.card_no as cardNo,
        w.card_cc_type as cardCcType,
        q.extra_discount_amount as extraDiscountAmount,
        q.base_discount_amount as baseDiscountAmount,
        q.marking_discount_amount as markingDiscountAmount,
        q.whole_sales_discount_amount as wholeSalesDiscountAmount,
        q.red_envelope_amount as redEnvelopeAmount,
        q.rec_amount as recAmount,
        q.refund_amount as refundTotalAmount,
        r.refund_amount as refundAmount,
        q.created_date as createdDate,
        r.created_date as refundTime,
        r.state as state,
        q.credit_order_no as borrowId,
        b.period_quantity as period,
        b.state as borrowState,
        q.id as qrPayFlowId,
        q.donation_amount as donationAmount,
        q.tip_amount as tipAmount,
        q.trans_type as transType
        FROM
        u_refund_order r
        LEFT JOIN u_api_merchant sm ON sm.id = r.super_merchant_id
        LEFT JOIN u_api_merchant m ON m.id = r.merchant_id
        LEFT JOIN u_qr_pay_flow q ON r.trans_no = q.trans_no
        LEFT JOIN u_user u ON q.pay_user_id = u.id
        LEFT JOIN u_withhold_flow w ON w.flow_id = q.id
        LEFT JOIN uwallet_credit.u_borrow b ON b.id = q.credit_order_no
        where r.`status` = 1
        and q.`status` = 1
        <if test="orderSource != null">
            and r.order_source =  #{orderSource}
        </if>
        <if test="transNo != null">
            and q.trans_no =  #{transNo}
        </if>
        <if test="id != null">
            and r.id =  #{id}
        </if>
        <if test="merchantId != null">
            and sm.id =  #{merchantId}
        </if>
        <if test="subMerchantId != null">
            and m.id =  #{subMerchantId}
        </if>
        <if test="practicalName != null">
            and sm.practical_name like CONCAT("%", #{practicalName} , "%")
        </if>
        <if test="userFirstName != null">
            and u.user_first_name like CONCAT("%", #{userFirstName},"%")
        </if>
        <if test="userLastName != null">
            and u.user_last_name like  CONCAT("%", #{userLastName},"%")
        </if>
        <if test="phone != null">
            and u.phone =  #{phone}
        </if>
        <if test="states != null">
            and r.state in (${states})
        </if>
        <if test="state != null">
            and r.state  = #{state}
        </if>
        <if test="start != null and end != null">
            AND   r.created_date BETWEEN #{start} AND #{end}
        </if>
        <if test="settlementState != null">
            and r.settlement_state  = #{settlementState}
        </if>
        order by r.created_date desc

        <if test="pc != null">
            LIMIT ${pc.startIndex}, ${pc.pageSize}
        </if>

    </select>

    <update id="addClearBatchId">
        UPDATE u_refund_order
        <set>
            <if test="batchId != null">
                `batch_id`=#{batchId},
            </if>
            <if test="clearState != null">
                `settlement_state`=#{clearState},
            </if>
            <if test="clearTime != null">
                `settlement_time`=#{clearTime},
            </if>
            <if test="modifiedBy != null">
                `modified_by`=#{modifiedBy},
            </if>
            <if test="modifiedDate != null">
                `modified_date`=#{modifiedDate},
            </if>
        </set>
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            `state` = 1
            and status = 1
            <if test="orderSource != null">
                AND order_source = #{orderSource}
            </if>
            <if test="orgClearState != null">
                AND `settlement_state`=#{orgClearState}
            </if>
            <if test="orgBatchId != null">
                AND `batch_id`=#{orgBatchId}
            </if>

            <if test="start != null and end != null">
                AND `created_date` BETWEEN #{start} AND #{ end}
            </if>
            <if test="merchantIdList != null">
                AND merchant_id IN
                <foreach collection="merchantIdList" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
        </trim>

    </update>
    <update id="clearData">
        UPDATE u_refund_order
        <set>
        <if test="modifiedBy != null">
            `modified_by`=#{modifiedBy},
        </if>
        <if test="modifiedDate != null">
            `modified_date`=#{modifiedDate},
        </if>
        <if test="settlementState != null">
            `settlement_state`=#{settlementState},
        </if>
        <if test="settlementTime != null">
            `settlement_time`=#{settlementTime},
        </if>
        </set>
        WHERE
            `status` = 1
        AND merchant_id = #{merchantId}
        AND batch_id = #{batchId}

    </update>
    <update id="rollbackSettlement">
        UPDATE u_refund_order
        <set>
            <if test="modifiedBy != null">
                `modified_by`=#{modifiedBy},
            </if>
                `modified_date`=#{now},
            <if test="settlementState != null">
            `settlement_state`=#{settlementState},
           </if>
            <if test="ip != null">
                `ip`=#{ip},
            </if>
                `settlement_time`=#{now},
        </set>
        WHERE
        `status` = 1
        AND merchant_id = #{merchantId}
        AND batch_id = #{batchId}
    </update>


</mapper>
