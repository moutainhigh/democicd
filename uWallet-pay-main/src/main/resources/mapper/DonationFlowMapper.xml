<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.uwallet.pay.main.dao.DonationFlowDAO">

  <resultMap id="donationFlowMap" type="com.uwallet.pay.main.model.entity.DonationFlow">
    <id property="id" jdbcType="BIGINT" column="id"/>
    <result property="flowId" jdbcType="BIGINT" column="flow_id"/>
    <result property="userId" jdbcType="BIGINT" column="user_id"/>
    <result property="userName" jdbcType="VARCHAR" column="user_name"/>
    <result property="instituteId" jdbcType="BIGINT" column="institute_id"/>
    <result property="merchantId" jdbcType="BIGINT" column="merchant_id"/>
    <result property="amount" jdbcType="DECIMAL" column="amount"/>
    <result property="settlementAmount" jdbcType="DECIMAL" column="settlement_amount"/>
    <result property="transType" jdbcType="TINYINT" column="trans_type"/>
    <result property="state" jdbcType="TINYINT" column="state"/>
    <result property="settlementTime" jdbcType="BIGINT" column="settlement_time"/>
    <result property="settlementState" jdbcType="TINYINT" column="settlement_state"/>
    <result property="remark" jdbcType="VARCHAR" column="remark"/>
    <result property="createdBy" jdbcType="BIGINT" column="created_by"/>
    <result property="createdDate" jdbcType="BIGINT" column="created_date"/>
    <result property="modifiedBy" jdbcType="BIGINT" column="modified_by"/>
    <result property="modifiedDate" jdbcType="BIGINT" column="modified_date"/>
    <result property="status" jdbcType="TINYINT" column="status"/>
    <result property="ip" jdbcType="VARCHAR" column="ip"/>
    <result property="checkState" jdbcType="TINYINT" column="check_state"/>
    <result property="checkTime" jdbcType="BIGINT" column="check_time"/>
    <result property="batchId" jdbcType="BIGINT" column="batch_id"/>
  </resultMap>

  <resultMap id="donationFlowDTOMap" type="com.uwallet.pay.main.model.dto.DonationFlowDTO" extends="donationFlowMap"></resultMap>

  <!--通用查询条件-->
  <sql id="basicParams">
        <if test="id != null">
          AND `id`=#{id}
        </if>
        <if test="flowId != null">
          AND `flow_id`=#{flowId}
        </if>
        <if test="userId != null">
          AND `user_id`=#{userId}
        </if>
        <if test="userName != null">
          AND `user_name`=#{userName}
        </if>
        <if test="instituteId != null">
          AND `institute_id`=#{instituteId}
        </if>
        <if test="amount != null">
          AND `amount`=#{amount}
        </if>
        <if test="settlementAmount != null">
          AND `settlement_amount`=#{settlementAmount}
        </if>
        <if test="transType != null">
          AND `trans_type`=#{transType}
        </if>
        <if test="state != null">
          AND `state`=#{state}
        </if>
        <if test="settlementTime != null">
          AND `settlement_time`=#{settlementTime}
        </if>
        <if test="settlementState != null">
          AND `settlement_state`=#{settlementState}
        </if>
        <if test="remark != null">
          AND `remark`=#{remark}
        </if>
        <if test="createdBy != null">
          AND `created_by`=#{createdBy}
        </if>
        <if test="start != null and end != null">
          AND `created_date` BETWEEN #{start} AND #{ end}
        </if>
        <if test="modifiedBy != null">
          AND `modified_by`=#{modifiedBy}
        </if>
        <if test="modifiedDate != null">
          AND `modified_date`=#{modifiedDate}
        </if>
        <choose>
          <when test="status != null">AND status = #{status}</when>
          <otherwise><![CDATA[AND status > 0]]></otherwise>
        </choose>
        <if test="ip != null">
          AND `ip`=#{ip}
        </if>
        <if test="checkState != null">
          AND `check_state`=#{checkState}
        </if>
        <if test="checkTime != null">
          AND `check_time`=#{checkTime}
        </if>
        <if test="batchId != null">
          AND `batch_id`=#{batchId}
        </if>
      <if test="merchantId != null">
          AND `merchant_id`=#{merchantId}
      </if>
  </sql>

  <insert id="insert" parameterType="com.uwallet.pay.main.model.entity.DonationFlow">
    INSERT INTO u_donation_flow (
        <if test="id != null">
            `id`
        </if>
        <if test="flowId != null">
            ,`flow_id`
        </if>
        <if test="userId != null">
            ,`user_id`
        </if>
        <if test="userName != null">
            ,`user_name`
        </if>
        <if test="instituteId != null">
            ,`institute_id`
        </if>
        <if test="amount != null">
            ,`amount`
        </if>
        <if test="settlementAmount != null">
            ,`settlement_amount`
        </if>
        <if test="transType != null">
            ,`trans_type`
        </if>
        <if test="state != null">
            ,`state`
        </if>
        <if test="settlementTime != null">
            ,`settlement_time`
        </if>
        <if test="settlementState != null">
            ,`settlement_state`
        </if>
        <if test="remark != null">
            ,`remark`
        </if>
        <if test="createdBy != null">
            ,`created_by`
        </if>
        <if test="createdDate != null">
            ,`created_date`
        </if>
        <if test="modifiedBy != null">
            ,`modified_by`
        </if>
        <if test="modifiedDate != null">
            ,`modified_date`
        </if>
        <if test="status != null">
            ,`status`
        </if>
        <if test="ip != null">
            ,`ip`
        </if>
        <if test="checkState != null">
            ,`check_state`
        </if>
        <if test="checkTime != null">
            ,`check_time`
        </if>
        <if test="batchId != null">
            ,`batch_id`
        </if>
          <if test="merchantId != null">
              ,`merchant_id`
          </if>
    ) VALUES (
        <if test="id != null">
              #{id}
        </if>
        <if test="flowId != null">
              ,#{flowId}
        </if>
        <if test="userId != null">
              ,#{userId}
        </if>
        <if test="userName != null">
              ,#{userName}
        </if>
        <if test="instituteId != null">
              ,#{instituteId}
        </if>
        <if test="amount != null">
              ,#{amount}
        </if>
        <if test="settlementAmount != null">
              ,#{settlementAmount}
        </if>
        <if test="transType != null">
              ,#{transType}
        </if>
        <if test="state != null">
              ,#{state}
        </if>
        <if test="settlementTime != null">
              ,#{settlementTime}
        </if>
        <if test="settlementState != null">
              ,#{settlementState}
        </if>
        <if test="remark != null">
              ,#{remark}
        </if>
        <if test="createdBy != null">
              ,#{createdBy}
        </if>
        <if test="createdDate != null">
              ,#{createdDate}
        </if>
        <if test="modifiedBy != null">
              ,#{modifiedBy}
        </if>
        <if test="modifiedDate != null">
              ,#{modifiedDate}
        </if>
        <if test="status != null">
              ,#{status}
        </if>
        <if test="ip != null">
              ,#{ip}
        </if>
        <if test="checkState != null">
              ,#{checkState}
        </if>
        <if test="checkTime != null">
              ,#{checkTime}
        </if>
        <if test="batchId != null">
              ,#{batchId}
        </if>
      <if test="merchantId != null">
          ,#{merchantId}
      </if>
    )
  </insert>

  <insert id="insertList" parameterType="List">
    INSERT INTO u_donation_flow (
        `id`,
        `flow_id`,
        `user_id`,
        `user_name`,
        `institute_id`,
        `amount`,
        `settlement_amount`,
        `trans_type`,
        `state`,
        `settlement_time`,
        `settlement_state`,
        `remark`,
        `created_by`,
        `created_date`,
        `modified_by`,
        `modified_date`,
        `status`,
        `ip`,
        `check_state`,
        `check_time`,
        `batch_id`,
        `merchant_id`
      ) VALUES
    <foreach collection="list" item="data" separator=",">
      (
        #{data.id},
        #{data.flowId},
        #{data.userId},
        #{data.userName},
        #{data.instituteId},
        #{data.amount},
        #{data.settlementAmount},
        #{data.transType},
        #{data.state},
        #{data.settlementTime},
        #{data.settlementState},
        #{data.remark},
        #{data.createdBy},
        #{data.createdDate},
        #{data.modifiedBy},
        #{data.modifiedDate},
        #{data.status},
        #{data.ip},
        #{data.checkState},
        #{data.checkTime},
        #{data.batchId},
        #{data.merchantId}
      )
    </foreach>
  </insert>

  <update id="update" parameterType="com.uwallet.pay.main.model.entity.DonationFlow">
    UPDATE u_donation_flow
    <set>
        <if test="id != null">
          `id`=#{id},
        </if>
        <if test="flowId != null">
          `flow_id`=#{flowId},
        </if>
        <if test="userId != null">
          `user_id`=#{userId},
        </if>
        <if test="userName != null">
          `user_name`=#{userName},
        </if>
        <if test="instituteId != null">
          `institute_id`=#{instituteId},
        </if>
        <if test="amount != null">
          `amount`=#{amount},
        </if>
        <if test="settlementAmount != null">
          `settlement_amount`=#{settlementAmount},
        </if>
        <if test="transType != null">
          `trans_type`=#{transType},
        </if>
        <if test="state != null">
          `state`=#{state},
        </if>
        <if test="settlementTime != null">
          `settlement_time`=#{settlementTime},
        </if>
        <if test="settlementState != null">
          `settlement_state`=#{settlementState},
        </if>
        <if test="remark != null">
          `remark`=#{remark},
        </if>
        <if test="createdBy != null">
          `created_by`=#{createdBy},
        </if>
        <if test="createdDate != null">
          `created_date`=#{createdDate},
        </if>
        <if test="modifiedBy != null">
          `modified_by`=#{modifiedBy},
        </if>
        <if test="modifiedDate != null">
          `modified_date`=#{modifiedDate},
        </if>
        <if test="status != null">
          `status`=#{status},
        </if>
        <if test="ip != null">
          `ip`=#{ip},
        </if>
        <if test="checkState != null">
          `check_state`=#{checkState},
        </if>
        <if test="checkTime != null">
          `check_time`=#{checkTime},
        </if>
        <if test="batchId != null">
          `batch_id`=#{batchId},
        </if>
        <if test="merchantId != null">
            `merchant_id`=#{merchantId},
        </if>
    </set>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <choose>
        <when test="status != null ">AND status = #{status.value}</when>
        <otherwise><![CDATA[AND status > 0]]></otherwise>
      </choose>
        AND id = #{id}
    </trim>
  </update>

  <update id="delete" parameterType="Map">
      UPDATE u_donation_flow
      SET `status`=0,`modified_by`=#{modifiedBy},`modified_date`=#{modifiedDate}
      WHERE id = #{id}
  </update>

    <delete id="pdelete" parameterType="Map">
      DELETE FROM u_donation_flow
      WHERE id = #{id}
  </delete>

  <select id="count" parameterType="Map" resultType="Integer">
    <![CDATA[
            SELECT COUNT(DISTINCT id) FROM u_donation_flow
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
  </select>

  <select id="selectOne" parameterType="Map" resultMap="donationFlowMap">
    <![CDATA[
            SELECT * FROM u_donation_flow
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    LIMIT 1
  </select>

  <select id="selectOneDTO" parameterType="Map" resultMap="donationFlowDTOMap">
    <![CDATA[
            SELECT * FROM u_donation_flow
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    LIMIT 1
  </select>

  <select id="select" parameterType="Map" resultMap="donationFlowMap">
    <![CDATA[
            SELECT * FROM u_donation_flow
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    <if test="scs != null and scs.size() > 0">
      ORDER BY
      <foreach collection="scs" item="sc" separator=",">
          ${sc.field} ${sc.order}
      </foreach>
    </if>
    <if test="pc != null">
      LIMIT ${pc.startIndex}, ${pc.pageSize}
    </if>
  </select>

  <select id="selectDTO" parameterType="Map" resultMap="donationFlowDTOMap">
    <![CDATA[
            SELECT * FROM u_donation_flow
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    <if test="scs != null and scs.size() > 0">
      ORDER BY
      <foreach collection="scs" item="sc" separator=",">
          ${sc.field} ${sc.order}
      </foreach>
    </if>
    <if test="pc != null">
      LIMIT ${pc.startIndex}, ${pc.pageSize}
    </if>
  </select>

  <select id="selectMap" parameterType="Map" resultType="Map">
    SELECT
    <foreach collection="columns" item="cname" separator="," open="`" close="`">
        ${cname}
    </foreach>
    FROM u_donation_flow
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    <if test="scs != null and scs.size() > 0">
      ORDER BY
      <foreach collection="scs" item="sc" separator=",">
          ${sc.field} ${sc.order}
      </foreach>
    </if>
    <if test="pc != null">
      LIMIT ${pc.startIndex}, ${pc.pageSize}
    </if>
  </select>

  <!--统计相关查询-->
  <select id="groupCount" parameterType="Map" resultType="Map">
    <![CDATA[
            SELECT ${group} AS `group`, COUNT(DISTINCT id) AS `count` FROM u_donation_flow
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    GROUP BY `group`
    ORDER BY `group` ASC
  </select>

  <select id="sum" parameterType="Map" resultType="Double">
    <![CDATA[
            SELECT IFNULL(SUM(${sumfield}),0) AS `sum` FROM u_donation_flow
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
  </select>

  <select id="groupSum" parameterType="Map" resultType="Map">
    <![CDATA[
            SELECT ${group} AS `group`, IFNULL(SUM(${sumfield}),0) AS `sum` FROM u_donation_flow
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    GROUP BY `group`
    ORDER BY `group` ASC
  </select>
    <select id="selectDTOList" resultType="com.alibaba.fastjson.JSONObject">
        SELECT
        d.id,
        f.trans_no,
        IFNULL(m.practical_name , am.practical_name ) as practical_name,
        d.user_name,
        u.phone,
        f.trans_type,
        w.card_no,
        w.card_cc_type,
        f.trans_amount,
        IFNULL(f.pay_amount, 0)+IFNULL(d.amount, 0)+IFNULL(f.tip_amount, 0) pay_amount,
        f.red_envelope_amount,
        IFNULL(f.base_discount_amount, 0) + IFNULL(f.extra_discount_amount, 0) + IFNULL(f.marking_discount_amount,0) + IFNULL(f.whole_sales_discount_amount,0) as discount,
        f.red_envelope_amount,
        w.charge fee,
        d.amount,
        f.created_date,
        d.settlement_time,
        f.tip_amount tip,
        d.created_date
        FROM
            u_donation_flow d
        LEFT JOIN u_merchant m ON m.id = d.merchant_id
        LEFT JOIN u_api_merchant am ON  am.id = d.merchant_id
        LEFT JOIN u_user u ON d.user_id = u.id
        LEFT JOIN u_qr_pay_flow f ON f.id = d.flow_id
        left join u_withhold_flow w on w.flow_id=f.id
        WHERE
        d.status > 0 and  d.state = 1

        <if test="userId != null">
            and d.user_id = #{userId}
        </if>
        <if test="settlementState != null">
            AND d.settlement_state =#{settlementState}
        </if>
        <if test="settlementState == null">
            AND d.settlement_state IN (0, 1, 3)
        </if>
        <if test="start != null and end != null and start != '' and end != ''">
            AND d.`created_date` BETWEEN #{start} AND #{ end}
        </if>
        <if test="batchId != null">
            AND d.`batch_id` = #{batchId}
        </if>
        ORDER BY d.created_date desc
        <if test="pc != null">
            LIMIT ${pc.startIndex}, ${pc.pageSize}
        </if>
    </select>
    <update id="updateSettlementState">
        update u_donation_flow set settlement_state=#{settlementState} where status>0
            and id in (
            <foreach collection="idList" item="id" separator=",">
                #{id}
            </foreach>
            )
    </update>
    <select id="exportUserOrder" resultType="com.alibaba.fastjson.JSONObject">
        SELECT
        f.trans_no,
        IFNULL(m.practical_name, am.practical_name) as practical_name,
        d.user_name,
        u.phone,
        f.trans_type,
        w.card_no,
        w.card_cc_type,
        f.trans_amount,
        IFNULL(f.pay_amount, 0)+IFNULL(d.amount, 0)+IFNULL(f.tip_amount, 0) pay_amount,
        f.red_envelope_amount,
        IFNULL(f.base_discount_amount, 0) + IFNULL(f.extra_discount_amount, 0) + IFNULL(f.marking_discount_amount,0) + IFNULL(f.whole_sales_discount_amount,0) as discount,
        f.red_envelope_amount,
        w.charge fee,
        d.amount,
        f.created_date,
        d.settlement_time,
        d.settlement_state,
        f.tip_amount tip
        FROM
            u_donation_flow d
        LEFT JOIN u_merchant m ON m.id = d.merchant_id
        LEFT JOIN u_api_merchant am ON am.id = d.merchant_id
        LEFT JOIN u_user u ON d.user_id = u.id
        LEFT JOIN u_qr_pay_flow f ON f.id = d.flow_id
        left join u_withhold_flow w on w.flow_id=f.id
        WHERE d.status>0  and  d.state=1
        <if test="settlementState != null">
            AND d.settlement_state =#{settlementState}
        </if>
        <if test="settlementState == null">
            AND d.settlement_state IN (0, 1, 3)
        </if>
        <if test="userIdList != null">
          and d.user_id in ( ${userIdList} )
        </if>
        <if test="phone != null">
            AND u.phone = ${phone}
        </if>
        <if test="userName != null">
            AND d.user_name  like CONCAT("%",#{userName},"%")
        </if>
        <if test="start != null and end != null">
            AND d.created_date BETWEEN #{start} AND #{end}
        </if>
          order by d.created_date desc
    </select>
    <select id="findTotal" resultType="com.alibaba.fastjson.JSONObject">
        SELECT
            d.settlement_state,
            sum(d.amount) amount,
            count(d.id) number
        FROM
            u_donation_flow d
            left join u_user u on u.id=d.user_id
        WHERE
            d.`status` > 0 and  d.state=1
        <if test="settlementState != null">
            AND d.settlement_state =#{settlementState}
        </if>
        <if test="settlementState == null">
            AND d.settlement_state IN (0, 1, 3)
        </if>
        <if test="userIdList != null">
            and d.user_id in (${userIdList})
        </if>
        <if test="phone != null">
            AND u.phone = ${phone}
        </if>
        <if test="userName != null">
            AND d.user_name like CONCAT("%",#{userName},"%")
        </if>
        <if test="start != null and end != null">
            AND d.created_date BETWEEN #{start} AND #{end}
        </if>
        GROUP BY
            d.settlement_state
    </select>


    <update id="updateStateByFlowId" parameterType="Map" >
      UPDATE u_donation_flow
      SET `state`= #{state},`modified_by`=#{modifiedBy},`modified_date`=#{modifiedDate}
      WHERE flow_id = #{flowId} limit 1
  </update>


    <select id="getUserDonationList" parameterType="Map" resultType="com.uwallet.pay.main.model.dto.DonationUserListDTO">
        select u.user_id ,u.phone,u.user_name from (
        select d.user_id,u.phone,d.user_name  from u_donation_flow d left join u_user u on d.user_id = u.id
        where d.`status` = 1 and u.`status` = 1 and d.state = 1
            <if test="userName != null">
                and d.user_name like CONCAT("%",#{userName},"%")
            </if>
            <if test="settlementState != null">
                and d.settlement_state = #{settlementState}
            </if>
            <if test="phone != null">
                and u.phone = #{phone}
            </if>
            <if test="start != null and end != null">
                AND d.`created_date` BETWEEN #{start} AND #{ end}
            </if>
            group by d.user_id,u.phone,d.user_name
        )u order by u.user_id asc
        <if test="pc != null">
            LIMIT ${pc.startIndex}, ${pc.pageSize}
        </if>
    </select>

    <select id="getDonationDataList" parameterType="Map" resultMap="donationFlowDTOMap">
        select d.* from u_donation_flow d left join u_user u on d.user_id = u.id
        where d.`status` = 1 and u.`status` = 1 and d.state = 1
        <if test="userName != null">
            and d.user_name like CONCAT("%",#{userName},"%")
        </if>
        <if test="settlementState != null">
            and d.settlement_state = #{settlementState}
        </if>
        <if test="phone != null">
            and u.phone = #{phone}
        </if>
        <if test="start != null and end != null">
            AND d.`created_date` BETWEEN #{start} AND #{ end}
        </if>
    </select>

    <select id="getUserDonationListCount" parameterType="Map" resultType="Integer">
        select count(*) from (
        select distinct d.user_id from u_donation_flow d left join u_user u on d.user_id = u.id
        where d.`status` = 1 and u.`status` = 1 and d.state = 1
        <if test="userName != null">
            and d.user_name like CONCAT("%",#{userName},"%")
        </if>
        <if test="settlementState != null">
            and d.settlement_state = #{settlementState}
        </if>
        <if test="phone != null">
            and u.phone = #{phone}
        </if>
        <if test="start != null and end != null">
            AND d.`created_date` BETWEEN #{start} AND #{ end}
        </if>
        ) u
    </select>
    <select id="countOrderByUserId" resultType="java.lang.Integer">
        SELECT
        count(*)
        FROM
        u_donation_flow d
        WHERE
        d.status > 0  and  d.state = 1
        <if test="userId != null">
           and d.user_id = #{userId}
        </if>
        <if test="settlementState != null">
            AND d.settlement_state =#{settlementState}
        </if>
        <if test="start != null and end != null and start != '' and end != ''">
            AND d.`created_date` BETWEEN #{start} AND #{ end}
        </if>
        <if test="batchId != null">
            AND d.`batch_id` = #{batchId}
        </if>
    </select>

    <update id="clear" parameterType="com.uwallet.pay.main.model.dto.DonationFlowClearDTO">
        UPDATE u_donation_flow d
        LEFT JOIN u_user u ON u.id = d.user_id
            SET d.batch_id = #{batchId},
             d.modified_by = #{modifiedBy},
             d.modified_date = #{now},
             d.settlement_state = 1,
             d.settlement_time = #{now},
             d.ip = #{ip}
        WHERE
        d.`status` = 1 and u.`status` = 1 and d.settlement_state = 0 and d.state = 1
        <if test="userName != null">
            and d.user_name like CONCAT("%",#{userName},"%")
        </if>
        <if test="phone != null">
            and u.phone = #{phone}
        </if>
        <if test="userIds != null ">
            AND d.`user_id` in (${userIds})
        </if>
        <if test="start != null and end != null">
            AND d.`created_date` BETWEEN #{start} AND #{ end}
        </if>

    </update>
    <select id="getClearBatchList" parameterType="Long" resultType="com.uwallet.pay.main.model.dto.QrPayFlowDTO">
        SELECT
            flow_id AS transNo,
            u.phone,
            amount AS transAmount,
            0 redEnvelopeAmount,
            0 platformFee,
            settlement_amount recAmount,
            d.created_date createdDate,
            q.sale_type saleType,
            q.trans_type transType
        FROM
            u_donation_flow d
            LEFT JOIN u_user u ON d.user_id = u.id
            LEFT JOIN u_qr_pay_flow q ON q.id = d.flow_id
        WHERE
            d.`status` = 1
            AND u.`status` = 1
            and d.batch_id = #{batchId}
    </select>

    <update id="updateSettlementRollback">
         UPDATE u_donation_flow d
         SET d.batch_id = null,
             d.settlement_time = null,
             d.settlement_state = 0,
             d.modified_by = #{modifiedBy},
             d.modified_date = #{modifiedDate},
             d.ip = #{ip}
        WHERE d.id in (${ids})
    </update>

</mapper>
