<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.uwallet.pay.main.dao.ApiApproveLogDAO">

  <resultMap id="apiApproveLogMap" type="com.uwallet.pay.main.model.entity.ApiApproveLog">
    <id property="id" jdbcType="BIGINT" column="id"/>
    <result property="merchantId" jdbcType="BIGINT" column="merchant_id"/>
      <result property="merchantClass" jdbcType="TINYINT" column="merchant_class"/>
      <result property="merchantCity" jdbcType="TINYINT" column="merchant_city"/>
    <result property="approveType" jdbcType="TINYINT" column="approve_type"/>
    <result property="state" jdbcType="TINYINT" column="state"/>
    <result property="approvedBy" jdbcType="BIGINT" column="approved_by"/>
    <result property="data" jdbcType="VARCHAR" column="data"/>
    <result property="remark" jdbcType="VARCHAR" column="remark"/>
    <result property="createdBy" jdbcType="BIGINT" column="created_by"/>
    <result property="createdDate" jdbcType="BIGINT" column="created_date"/>
    <result property="modifiedBy" jdbcType="BIGINT" column="modified_by"/>
    <result property="modifiedDate" jdbcType="BIGINT" column="modified_date"/>
    <result property="status" jdbcType="TINYINT" column="status"/>
    <result property="ip" jdbcType="VARCHAR" column="ip"/>
  </resultMap>

  <resultMap id="apiApproveLogDTOMap" type="com.uwallet.pay.main.model.dto.ApiApproveLogDTO" extends="apiApproveLogMap"></resultMap>

    <!--通用查询条件-->
    <sql id="basicParams">
        <if test="id != null">
            AND `id`=#{id}
        </if>
        <if test="merchantId != null">
            AND `merchant_id`=#{merchantId}
        </if>
        <if test="merchantClass != null">
            AND `merchant_class`=#{merchantClass}
        </if>
        <if test="merchantCity != null">
            AND `merchant_city`=#{merchantCity}
        </if>
        <if test="approveType != null">
            AND `approve_type`=#{approveType}
        </if>
        <if test="state != null">
            AND `state`=#{state}
        </if>
        <if test="approvedBy != null">
            AND `approved_by`=#{approvedBy}
        </if>
        <if test="data != null">
            AND `data`=#{data}
        </if>
        <if test="remark != null">
            AND `remark`=#{remark}
        </if>
        <if test="createdBy != null">
            AND `created_by`=#{createdBy}
        </if>
        <if test="start != null and end != null">
            AND `created_date` BETWEEN #{start} AND #{ end}
        </if>
        <if test="modifiedBy != null">
            AND `modified_by`=#{modifiedBy}
        </if>
        <if test="modifiedDate != null">
            AND `modified_date`=#{modifiedDate}
        </if>
        <choose>
            <when test="status != null">AND status = #{status}</when>
            <otherwise><![CDATA[AND status > 0]]></otherwise>
        </choose>
        <if test="ip != null">
            AND `ip`=#{ip}
        </if>
    </sql>

    <insert id="insert" parameterType="com.uwallet.pay.main.model.entity.ApiApproveLog">
        INSERT INTO u_api_approve_log (
        <if test="id != null">
            `id`
        </if>
        <if test="merchantId != null">
            ,`merchant_id`
        </if>
        <if test="merchantClass != null">
            ,`merchant_class`
        </if>
        <if test="merchantCity != null">
            ,`merchant_city`
        </if>
        <if test="approveType != null">
            ,`approve_type`
        </if>
        <if test="state != null">
            ,`state`
        </if>
        <if test="approvedBy != null">
            ,`approved_by`
        </if>
        <if test="data != null">
            ,`data`
        </if>
        <if test="remark != null">
            ,`remark`
        </if>
        <if test="createdBy != null">
            ,`created_by`
        </if>
        <if test="createdDate != null">
            ,`created_date`
        </if>
        <if test="modifiedBy != null">
            ,`modified_by`
        </if>
        <if test="modifiedDate != null">
            ,`modified_date`
        </if>
        <if test="status != null">
            ,`status`
        </if>
        <if test="ip != null">
            ,`ip`
        </if>
        ) VALUES (
        <if test="id != null">
            #{id}
        </if>
        <if test="merchantId != null">
            ,#{merchantId}
        </if>
        <if test="merchantClass != null">
            ,#{merchantClass}
        </if>
        <if test="merchantCity != null">
            ,#{merchantCity}
        </if>
        <if test="approveType != null">
            ,#{approveType}
        </if>
        <if test="state != null">
            ,#{state}
        </if>
        <if test="approvedBy != null">
            ,#{approvedBy}
        </if>
        <if test="data != null">
            ,#{data}
        </if>
        <if test="remark != null">
            ,#{remark}
        </if>
        <if test="createdBy != null">
            ,#{createdBy}
        </if>
        <if test="createdDate != null">
            ,#{createdDate}
        </if>
        <if test="modifiedBy != null">
            ,#{modifiedBy}
        </if>
        <if test="modifiedDate != null">
            ,#{modifiedDate}
        </if>
        <if test="status != null">
            ,#{status}
        </if>
        <if test="ip != null">
            ,#{ip}
        </if>
        )
    </insert>

    <insert id="insertList" parameterType="List">
        INSERT INTO u_api_approve_log (
        `id`,
        `merchant_id`,
        `merchant_class`,
        `merchant_city`,
        `approve_type`,
        `state`,
        `approved_by`,
        `data`,
        `remark`,
        `created_by`,
        `created_date`,
        `modified_by`,
        `modified_date`,
        `status`,
        `ip`
        ) VALUES
        <foreach collection="list" item="data" separator=",">
            (
            #{data.id},
            #{data.merchantId},
            #{data.merchantClass},
            #{data.merchantCity},
            #{data.approveType},
            #{data.state},
            #{data.approvedBy},
            #{data.data},
            #{data.remark},
            #{data.createdBy},
            #{data.createdDate},
            #{data.modifiedBy},
            #{data.modifiedDate},
            #{data.status},
            #{data.ip}
            )
        </foreach>
    </insert>

    <update id="update" parameterType="com.uwallet.pay.main.model.entity.ApiApproveLog">
        UPDATE u_api_approve_log
        <set>
            <if test="id != null">
                `id`=#{id},
            </if>
            <if test="merchantId != null">
                `merchant_id`=#{merchantId},
            </if>
            <if test="merchantClass != null">
                `merchant_class`=#{merchantClass},
            </if>
            <if test="merchantCity != null">
                `merchant_city`=#{merchantCity},
            </if>
            <if test="approveType != null">
                `approve_type`=#{approveType},
            </if>
            <if test="state != null">
                `state`=#{state},
            </if>
            <if test="approvedBy != null">
                `approved_by`=#{approvedBy},
            </if>
            <if test="data != null">
                `data`=#{data},
            </if>
            <if test="remark != null">
                `remark`=#{remark},
            </if>
            <if test="createdBy != null">
                `created_by`=#{createdBy},
            </if>
            <if test="createdDate != null">
                `created_date`=#{createdDate},
            </if>
            <if test="modifiedBy != null">
                `modified_by`=#{modifiedBy},
            </if>
            <if test="modifiedDate != null">
                `modified_date`=#{modifiedDate},
            </if>
            <if test="status != null">
                `status`=#{status},
            </if>
            <if test="ip != null">
                `ip`=#{ip},
            </if>
        </set>
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <choose>
                <when test="status != null ">AND status = #{status.value}</when>
                <otherwise><![CDATA[AND status > 0]]></otherwise>
            </choose>
            AND id = #{id}
        </trim>
    </update>


    <update id="delete" parameterType="Map">
      UPDATE u_api_approve_log
      SET `status`=0,`modified_by`=#{modifiedBy},`modified_date`=#{modifiedDate}
      WHERE id = #{id}
  </update>

  <delete id="pdelete" parameterType="Map">
      DELETE FROM u_api_approve_log
      WHERE id = #{id}
  </delete>

  <select id="count" parameterType="Map" resultType="Integer">
    <![CDATA[
            SELECT COUNT(DISTINCT id) FROM u_api_approve_log
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
  </select>

  <select id="selectOne" parameterType="Map" resultMap="apiApproveLogMap">
    <![CDATA[
            SELECT * FROM u_api_approve_log
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    LIMIT 1
  </select>

  <select id="selectOneDTO" parameterType="Map" resultMap="apiApproveLogDTOMap">
    <![CDATA[
            SELECT * FROM u_api_approve_log
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    LIMIT 1
  </select>

  <select id="select" parameterType="Map" resultMap="apiApproveLogMap">
    <![CDATA[
            SELECT * FROM u_api_approve_log
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    <if test="scs != null and scs.size() > 0">
      ORDER BY
      <foreach collection="scs" item="sc" separator=",">
          ${sc.field} ${sc.order}
      </foreach>
    </if>
    <if test="pc != null">
      LIMIT ${pc.startIndex}, ${pc.pageSize}
    </if>
  </select>

  <select id="selectDTO" parameterType="Map" resultMap="apiApproveLogDTOMap">
    <![CDATA[
            SELECT * FROM u_api_approve_log
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    <if test="scs != null and scs.size() > 0">
      ORDER BY
      <foreach collection="scs" item="sc" separator=",">
          ${sc.field} ${sc.order}
      </foreach>
    </if>
    <if test="pc != null">
      LIMIT ${pc.startIndex}, ${pc.pageSize}
    </if>
  </select>

  <select id="selectMap" parameterType="Map" resultType="Map">
    SELECT
    <foreach collection="columns" item="cname" separator="," open="`" close="`">
        ${cname}
    </foreach>
    FROM u_api_approve_log
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    <if test="scs != null and scs.size() > 0">
      ORDER BY
      <foreach collection="scs" item="sc" separator=",">
          ${sc.field} ${sc.order}
      </foreach>
    </if>
    <if test="pc != null">
      LIMIT ${pc.startIndex}, ${pc.pageSize}
    </if>
  </select>

  <!--统计相关查询-->
  <select id="groupCount" parameterType="Map" resultType="Map">
    <![CDATA[
            SELECT ${group} AS `group`, COUNT(DISTINCT id) AS `count` FROM u_api_approve_log
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    GROUP BY `group`
    ORDER BY `group` ASC
  </select>

  <select id="sum" parameterType="Map" resultType="Double">
    <![CDATA[
            SELECT IFNULL(SUM(${sumfield}),0) AS `sum` FROM u_api_approve_log
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
  </select>

  <select id="groupSum" parameterType="Map" resultType="Map">
    <![CDATA[
            SELECT ${group} AS `group`, IFNULL(SUM(${sumfield}),0) AS `sum` FROM u_api_approve_log
        ]]>
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <!-- 通用条件引入 -->
      <include refid="basicParams"/>
    </trim>
    GROUP BY `group`
    ORDER BY `group` ASC
  </select>
    <select id="countMerchantApprove" parameterType="Map" resultType="Integer">
        SELECT COUNT(DISTINCT ua.id) FROM u_api_approve_log ua
        LEFT JOIN u_api_merchant um ON ua.merchant_id = um.id AND um.status > 0
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <choose>
                <when test="state != null">AND ua.state = #{state}</when>
                <otherwise><![CDATA[AND ua.state IN(-1,1) ]]></otherwise>
            </choose>
            <if test="entityType != null">
                AND um.`entity_type`=#{entityType}
            </if>
            <if test="id != null">
                AND um.`id` =#{id}
            </if>
            <if test="merchantClass != null">
                AND ua.`merchant_class`=#{merchantClass}
            </if>
            <if test="merchantCity != null">
                AND ua.`merchant_city`=#{merchantCity}
            </if>
            <if test="state != null">
                AND ua.`state`=#{state}
            </if>
            <if test="practicalName != null">
                AND um.`practical_name` LIKE CONCAT('%',#{practicalName},'%')
            </if>
            <if test="start != null and end != null">
                AND ua.`created_date` BETWEEN #{start} AND #{end}
            </if>
            <if test="isAvailable != null">
                AND um.`is_available`=#{isAvailable}
            </if>
            <choose>
                <when test="status != null">AND ua.status = #{status}</when>
                <otherwise><![CDATA[AND ua.status > 0]]></otherwise>
            </choose>
        </trim>
    </select>
    <select id="findMerchantApprove" parameterType="Map" resultMap="apiApproveLogDTOMap">
        SELECT ua.*,um.practical_name FROM u_api_approve_log ua
        LEFT JOIN u_api_merchant um ON ua.merchant_id = um.id AND um.status > 0
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="id != null">
                AND um.`id` =#{id}
            </if>
            <choose>
                <when test="state != null">AND ua.state = #{state}</when>
                <otherwise><![CDATA[AND ua.state IN(-1,1) ]]></otherwise>
            </choose>
            <if test="entityType != null">
                AND um.`entity_type`=#{entityType}
            </if>
            <if test="merchantClass != null">
                AND ua.`merchant_class`=#{merchantClass}
            </if>
            <if test="merchantCity != null">
                AND ua.`merchant_city`=#{merchantCity}
            </if>
            <if test="state != null">
                AND ua.`state`=#{state}
            </if>
            <if test="practicalName != null">
                AND um.`practical_name` LIKE CONCAT('%',#{practicalName},'%')
            </if>
            <if test="start != null and end != null">
                AND ua.`created_date` BETWEEN #{start} AND #{end}
            </if>
            <if test="isAvailable != null">
                AND um.`is_available`=#{isAvailable}
            </if>
            <choose>
                <when test="status != null">AND ua.status = #{status}</when>
                <otherwise><![CDATA[AND ua.status > 0]]></otherwise>
            </choose>
        </trim>
        <if test="scs != null and scs.size() > 0">
            ORDER BY
            <foreach collection="scs" item="sc" separator=",">
                ua.${sc.field} ${sc.order}
            </foreach>
        </if>
        <if test="pc != null">
            LIMIT ${pc.startIndex}, ${pc.pageSize}
        </if>
    </select>
</mapper>
